<옾소의 역사>
 오픈소스. 현대 사람들은 오픈소스(Open-Source)를 많이 사용하고 그것을 응용하여 많은 프로그램을 개발한다. 그렇다면 이 오픈소스는 어떻게 생성되었으며 어떻게 만들어졌을까?

 - 1960년대 중반 당시 AT&T 와 General Electric 사, Honeywell 사, MIT 공과대학에서 MULTICS 라는 프로젝트를 미 국방성(ARPA)으로부터 자금 지원을 받아서 수행하게 된다. 멀틱스 프로젝트의 목적은 끊이지 않고 돌아갈 수 있는 다중 사용자, 다중 프로세서, 다중 프로세스 기반의 시스템을 만드는 것이었다. 물론 이 프로젝트에는 군사적인 목적도 있어서 보안과 관련해서도 다중 레벨 보안의 개념도 지원할 계획이었다. 그 당시로써 이상적인 시스템으로 계획되었고, 디자인되었던 시스템이었다. 1969년 켄 톰슨은 당시 AT&T사의 연구원으로 있으면서 멀틱스 프로젝트에 참가하고 있었는데, 그는 사무실에 있는 컴퓨터에 멀틱스와 비슷한 개념을 가진 운영체재를 한번 구현해 보게 되었따. 그러다 그는 여기에 재미를 느끼고 함꼐  멀틱스 프로젝트에서 일했던 데니스 리치와 피터 뉴만과 이 프로젝트를 같이 하게 되었고, 이 프로젝트의 이름을 '유닉스(Unix)'라고 지었다. 기존의 멀틱스 프로젝트에서는 너무 많은 것을 구현하려고 했었지만 유닉스 시스템에서는 단지 프로그램을 실행시키는 것에만 중점을 두었다. 이런저런 기능을 전부 제외하고 굉장히 단순하고 간단하게 만든 것이다. 1970년대, AT&T 연구원들은 유닉스 시스템을 점점 보안하고 발전시키면서 하나의 기능만 하는 자그마하고 단순한 프로그램들을 함께 사용함으로써 엄청난 일을 수행할 수 있게 만드는 유닉스 시스템의 철학을 세우게 되었다. 그들은 이 시스템을 잘 활용하기 위해 작은 프로그램들의 사용을 극대화 했고 또 프로그램의 소스 코드도 수정해 가며 계속 유닉스를 발전시키게 된다.

- 그러다 1973년 데니스 리치가 C 프로그래밍 언어를 사용해 대부분의 유닉스 시스템의 코드를 다시 쓰게 된다. C 언어는 다른 기계로 포티잉 매우 쉽기 때문에, 유닉스 시스템이 C로 다시 쓰여지면서 산불처럼 크게 퍼지기 시작했다. 이로 인해 유닉스 시스템은 빠르고 크게 사람들 사이에서 확산되었고 어느새 널리 대중적으로 사용되는 운영체제가 되었다. 이에 따라 자연스레 대규모 기업들에서도 유닉스를 주목하게 되었다. 실제로, 1977년경에 인터넷의 500개 가량의 사이트에서 유닉스를 운용하고 있다는 통계가 있으며, 그 중 125개는 대학에서 운용되었다. 하지만 그 당시 유닉스가 운용되는 대부분의 기계들은 실험실 등에 위치해 있었는데, 당시의 네트워크 환경도 그랬지만 대부분 격리된 장소에서 네트워크로의 접근 등이 허용되지 않는 환경이었다. 따라서 보안과 같은 요소가 거의 필요하지 않았다. 단지 몇명의 허가된 사용자들만이 시스템에 접근할 수 있었다. 그러면서 유닉스의 사용자들은 계속적으로 툴과 유틸리티들을 개발하고, 보다 나은 성능을 가지도록 향상시키고 있었다.

- 오늘날의 유닉스 시스템은 위에서 언급한 매우 많은 표준들과 방식들에 기반해서 발전해왔고 또한 제안된 표준들에 의해 비교적 비슷하고 공통적인 인터페이스를 가지게 되었으며, 여러가지 분야에서 기본 플랫폼으로써의 역할을 충실히 수행하고 있다. 후엔 유닉스를 기반으로 리눅스를 만들고 발전시킬 수 있었기에 유닉스는 소프트웨어의 발전에 기반이 된 매우 중요한 역할을 맡고 있다.


 - 1971년 리처드 스톨만은 MIT대학 인공지능 연구소에서 일하기 시작하여 소프트웨어를 공유하는 공동체의 일원이 됐다. 그 당시는 특정한 프로그램의 소스 코드를 자유롭게 얻을 수 있었기 때문에 언제든지 프로그램을 수정하거나 그 프로그램을 응용하여 새로운 프로그램을 만들 수 있었던 소유가 아닌 공유의 정신이 충만한 시절이었다. 당시는 개인 뿐만 아니라 기업 또한 소프트웨어를 무료로 배포하며 복제와 수정을 자유롭게 할 수 있도록 했다.

 - 당시 리처스 스톨만은 동료들과 ITS 운영체제를 개선하는 작업을 하고있었다. 하지만 1980년대에 들어서 ITS가 아닌 DEC의 운영체게를 도입하게 되고 ITS 운영체게는 종료되었다. DEC의 운영체제는 기존과는 달리 자유소프트웨어가 아니었다. 소프트웨어를 무료로 자유롭게 사용하거나 변경 할 수 없었고 관련 자료를 유출하지 않겠다는 비공개 계약에 동의하고 나서야 사용할 수 있었다. 리처드 스톨만은 이것을 보고 "컴퓨터를 사용하는 처음 단계부터 주위 사람들을 돕지 않겠다고 약속하는 것과 같은 의미"라고 표현하며 이에 불만들 표했다.

- 이렇게 자유 소프트웨어가 아닌 체제는 개인용컴퓨터 시대가 도래하면서 더욱 심해졌다. 1980년대 초부터 소프트웨어 시장을 자유롭게 이용하는 것이 아닌 독점하려는 경쟁이 거세지면서 기업은 이제 소프트웨어를 공유하자는 정신이 아닌 기업의 이익을 위해 소프트웨어를 독점하려고 했다. 대표적인 예가 마이크로소프트 이다. 소프트웨어는 처음엔 공적인 비용을 통해 개발되었지만, 점점 마이크로소프트와 같은 사기업에 넘어가고 있다. 이를 보고 리처드 스톨만은 독점 소프트웨어 체제에 들어가지 않고 70년에대 누렸던 자유소프트웨어 시대를 다시 복원하기로 마음먹는다. 그는 소프트웨어 상업화에 반대하고 소프트웨어 개발 초기의 상호협력적인 문화로 돌아갈 것을 주장하였고 1984년 '그누(GNU) 프로젝트'를 시작한다. 그누 프로젝트는 프리웨어로만 구성된 완전한 하나의 유닉스 시스템을 만드는 것으로 누구나 자유롭게 "실행, 복사, 수정, 배포" 할 수 있고. 누구도 그런 권리를 제한하면 안된다는 사용 허가권(License) 아래 소프트웨어를 배포한다. 또한 리처드 스톨만은 1년 뒤 1985년 자유 소프트웨어 재단(FSF) 창설하게 된다.

- '자유 소프트웨어' 에서 말하는 '자유'란 4종류의 의미를 담고 있다.
 1. 어떤 목적을 위해서도 프로그램을 실행시킬 수 있는 자유
 2. 프로그램의 작동 원리를 연구하고 이를 자신의 필요에 맞게 변형시킬 수 있는 자유(소스코드를 자유롭게 이용할 수 있는 자유)
 3. 이웃을 돕기 위해 무료 또는 유료로 프로그램을 복제하고 배포할 수 있는 자유
 4. 프로그램을 향상시키고 이익을 공동체 전체가 얻을 수 있도록 이를 배포할 수 있는 자유(그누 프로젝트)

- 자유 소프트웨어는 이처럼 사용자에게 위와 같은 자유를 모두 보장한다. 따라서 사용하는 모드 자유 소프트웨어를 유료 또는 무료로 수정하고 어느 누구에게나 그리고 어느 곳에라도 자유롭게 복제하고 배포할 수 있다. 개작된 부분을 자유롭게 만들기 위해서 그리고 개선된 버전을 발표하고 이를 의미있는 것으로 만들기 위해서는 당연히 프로그램의 소스 코드에 대한 접근이 선행되어야 한다. 따라서 소스 코드에 대한 접근은 자유 소프트웨어를 위한 필요 조건이라고 할 수 있다. 

- 자유 소프트웨어가 만들어지면서 C 컴파일러, 편집기, 디버거, 빌드 도구 등 프로그래밍과 컴퓨터 운영에 필요한 다양한 도구를 개발하면서 진행되다가 실질적인 결실은 리누스 토발즈의 리눅스 커널과의 결합에 의해 완성되었다.

- 자유 소프트웨어의 확산은 오픈소스의 탄생을 부르는 초석이 되었다. 1991년 리누스 토발즈는 대학에서 교수가 학생들을 상대로 개발한 미닉스를 사용하던 중, 유닉스와 호환되는 공개된 운영체제의 개발 계획을 미닉스 사용자 모임에 발표하였다. 그리고 그는 공개 운영체제에 대해 토론하는 뉴스그룹 ‘comp.os.minix’에 글을 남기면서 오픈소스 시대의 막이 올랐다. 그는 초반에 이 운영체제를 만들면서 거대하고 전문적인 것은 바라지 않고 단지 취미로 만들기 시작했다. 뉴스그룹의 구성원들은 그의 프로젝트에 흥미를 느꼈고 새 운영체제를 만드는 데 힘을 보태기 시작했다. 1991넌 10월 초, 리눅스의 첫 결실인 리눅스 0.02버전이 만들어 졌고 리눅스는 그렇게 인터넷을 통해 확산되면서 전세계 개발자들의 손을 거쳐 유닉스 호환 운영체제로 발전하게 됐다. 1992년 3월 리눅스는 0.95로 버전업 되었고 그래픽 사용자 인터페이스가 추가되었다. 그누 커널로 개발중이던 Hurd의 개발이 순조롭지 않았던 스톨먼과 FSF는 유닉스 커널과 호환 가능한 커널인 리눅스를 그누 시스템의 커널로 채택하였고, 리눅스는 그로 인해 강력한 그누 C 컴파일러인 gcc로 컴파일된 많은 응용 프로그램들을 가지게 되었다. 둘의 결합으로 그누 시스템은 완전한 구조를 갖추게 되었다. 리눅스의 커널 부분은 리누스 주도 하에 계속 개발되었는데, 리누스는 최대한 확장 가능한, 즉 사용자에게 제어권이 있으며 어떠한 인터페이스에도 종속되지 않도록 개발을 이끌고자 하는 의지가 있었따. 따라서 리누스는 그의 글을 통해 리눅스의 성공의 원인을 훌륭한 설꼐 원칙과 좋은 개발 모델 때문이라고 말하고 있다. 
- 1994년 1년 6개월 만에 리눅스 버전 1.0이 발표되었고, 이 전에는 네트워킹 기능이 추가되어 있었다. 이 운영체제는 자유로이 수정될 수 있고 매우 유용한 운영체제를 만들기 위해 FSF 산문과 다른 컴포넌트들과 병합되었다. 리눅스 공동체에서 여러 조직들은 사용할 수 있는 컴포넌트들을 다르게 조합하였는데 각 조합은 '배포판'으로 부르며 배포판들을 개발한 조직들을 '배포업자'라고 부른다. 일반적으로 널리 알려진 배포판으로는 레드햇, 맨드레이크, 수제, 칼데라, 코렐, 데비안 등이 있다. 다양한 배포판들간에는 차이점들이 있지만 모든 배포판들은 동일한 기바인 리눅스 커널 및 그누 라이브러리들에 기초하고 있다. 두가지 모두는 카피라이트 스타일의 라이센스로 다뤄지기 때문에 이러한 기반에 대한 변경은 일반적으로 모든 사람이 사용할 수 있어야 한다. 이는 AT&T 에서 파생된 유닉스 시스템간에는 존재하지 않는 리눅스만의 기반에서 리눅스 배포판들을 통합시키는 힘이 원천이다. 이 책은 리눅스 배포판에 고유한 것은 아니며 리눅스를 논의할 때 이 책은 본질적으로 모든 현재 주요 리눅스 배포판들에 대해 유효한 가정인 리눅스 커널 버전 2.2 이상과 C라이브러리 glibc 2.1 이상을 가정한다. 

-  이 즈음 자유소프트웨어라는 용어에서 오픈소프트웨어로 용어가 변경되는데, 자유란 용어 때문에 일반인들이 무료라고 인식하고 있다는 점, GPL 조항의 엄격성 때문에 소프트웨어 개발이 용이하지 않다는 점을 탈피하기 위해서 였다. 리눅스가 성공을 거두자 에릭 레이먼드는 1997년 상용 소프트웨어의 개발 방식을 성당에, 그누와 리눅스의 소프트웨어 개발 방식을 시장에 비유해 '성당과 시장'이라는 글을 쓴다.중세에 몇몇 건축가들에 의해 만들어지는 성당의 작업방식을 개발자 몇몇이 폐쇄적으로 개발하는 상용 소프트웨어의 개발 방식으로, 사람들이 북적이는 시장은 리눅스처럼 인터넷을 통해 누구나 개발에 참여할 수있는 개발 방식으로 본 것이다. 같은 해 에릭 레이먼드와 브루스 패런스는 OSI(Open Source Initiative)를 설립한다. 

- OSI는 오픈소스 문화를 활성화 해 기업들의 참여를 이끌려는 목적이었다. 오픈소스는 개작에 대한 동일 이용허락을 강제하지 않는 점을 빼고는 GPL과 비슷했다. 리처드 스톨만은 '자유 소프트웨어와 오픈소스는 대체로 같은 범주의 소프트웨어를 가리키는 말'이라며 소프트웨어 자체와 가치 중에서 무엇을 더 중요하게 생각하는가 라고 밝힌 바 있다.